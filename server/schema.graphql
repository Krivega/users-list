# source: https://api.graph.cool/simple/v1/cjbgj3dmt0isc0193qgbrmdzj
# timestamp: Sun Dec 24 2017 17:21:39 GMT+0300 (MSK)

enum _ModelMutationType {
  CREATED
  UPDATED
  DELETED
}

# Meta information about the query.#
type _QueryMeta {
  count: Int!
}

type Admin implements Node {
  email: String!
  id: ID!
  password: String!
}

input AdminFilter {
  # Logical AND on all given filters.#
  AND: [AdminFilter!]

  # Logical OR on all given filters.#
  OR: [AdminFilter!]
  email: String

  # All values that are not equal to given value.#
  email_not: String

  # All values that are contained in given list.#
  email_in: [String!]

  # All values that are not contained in given list.#
  email_not_in: [String!]

  # All values less than the given value.#
  email_lt: String

  # All values less than or equal the given value.#
  email_lte: String

  # All values greater than the given value.#
  email_gt: String

  # All values greater than or equal the given value.#
  email_gte: String

  # All values containing the given string.#
  email_contains: String

  # All values not containing the given string.#
  email_not_contains: String

  # All values starting with the given string.#
  email_starts_with: String

  # All values not starting with the given string.#
  email_not_starts_with: String

  # All values ending with the given string.#
  email_ends_with: String

  # All values not ending with the given string.#
  email_not_ends_with: String
  id: ID

  # All values that are not equal to given value.#
  id_not: ID

  # All values that are contained in given list.#
  id_in: [ID!]

  # All values that are not contained in given list.#
  id_not_in: [ID!]

  # All values less than the given value.#
  id_lt: ID

  # All values less than or equal the given value.#
  id_lte: ID

  # All values greater than the given value.#
  id_gt: ID

  # All values greater than or equal the given value.#
  id_gte: ID

  # All values containing the given string.#
  id_contains: ID

  # All values not containing the given string.#
  id_not_contains: ID

  # All values starting with the given string.#
  id_starts_with: ID

  # All values not starting with the given string.#
  id_not_starts_with: ID

  # All values ending with the given string.#
  id_ends_with: ID

  # All values not ending with the given string.#
  id_not_ends_with: ID
  password: String

  # All values that are not equal to given value.#
  password_not: String

  # All values that are contained in given list.#
  password_in: [String!]

  # All values that are not contained in given list.#
  password_not_in: [String!]

  # All values less than the given value.#
  password_lt: String

  # All values less than or equal the given value.#
  password_lte: String

  # All values greater than the given value.#
  password_gt: String

  # All values greater than or equal the given value.#
  password_gte: String

  # All values containing the given string.#
  password_contains: String

  # All values not containing the given string.#
  password_not_contains: String

  # All values starting with the given string.#
  password_starts_with: String

  # All values not starting with the given string.#
  password_not_starts_with: String

  # All values ending with the given string.#
  password_ends_with: String

  # All values not ending with the given string.#
  password_not_ends_with: String
}

enum AdminOrderBy {
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  password_ASC
  password_DESC
}

type AdminPreviousValues {
  email: String!
  id: ID!
  password: String!
}

input AdminSubscriptionFilter {
  # Logical AND on all given filters.#
  AND: [AdminSubscriptionFilter!]

  # Logical OR on all given filters.#
  OR: [AdminSubscriptionFilter!]

  mutation_in: [_ModelMutationType!]

  updatedFields_contains: String

  updatedFields_contains_every: [String!]

  updatedFields_contains_some: [String!]
  node: AdminSubscriptionFilterNode
}

input AdminSubscriptionFilterNode {
  email: String

  # All values that are not equal to given value.#
  email_not: String

  # All values that are contained in given list.#
  email_in: [String!]

  # All values that are not contained in given list.#
  email_not_in: [String!]

  # All values less than the given value.#
  email_lt: String

  # All values less than or equal the given value.#
  email_lte: String

  # All values greater than the given value.#
  email_gt: String

  # All values greater than or equal the given value.#
  email_gte: String

  # All values containing the given string.#
  email_contains: String

  # All values not containing the given string.#
  email_not_contains: String

  # All values starting with the given string.#
  email_starts_with: String

  # All values not starting with the given string.#
  email_not_starts_with: String

  # All values ending with the given string.#
  email_ends_with: String

  # All values not ending with the given string.#
  email_not_ends_with: String
  id: ID

  # All values that are not equal to given value.#
  id_not: ID

  # All values that are contained in given list.#
  id_in: [ID!]

  # All values that are not contained in given list.#
  id_not_in: [ID!]

  # All values less than the given value.#
  id_lt: ID

  # All values less than or equal the given value.#
  id_lte: ID

  # All values greater than the given value.#
  id_gt: ID

  # All values greater than or equal the given value.#
  id_gte: ID

  # All values containing the given string.#
  id_contains: ID

  # All values not containing the given string.#
  id_not_contains: ID

  # All values starting with the given string.#
  id_starts_with: ID

  # All values not starting with the given string.#
  id_not_starts_with: ID

  # All values ending with the given string.#
  id_ends_with: ID

  # All values not ending with the given string.#
  id_not_ends_with: ID
  password: String

  # All values that are not equal to given value.#
  password_not: String

  # All values that are contained in given list.#
  password_in: [String!]

  # All values that are not contained in given list.#
  password_not_in: [String!]

  # All values less than the given value.#
  password_lt: String

  # All values less than or equal the given value.#
  password_lte: String

  # All values greater than the given value.#
  password_gt: String

  # All values greater than or equal the given value.#
  password_gte: String

  # All values containing the given string.#
  password_contains: String

  # All values not containing the given string.#
  password_not_contains: String

  # All values starting with the given string.#
  password_starts_with: String

  # All values not starting with the given string.#
  password_not_starts_with: String

  # All values ending with the given string.#
  password_ends_with: String

  # All values not ending with the given string.#
  password_not_ends_with: String
}

type AdminSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Admin
  updatedFields: [String!]
  previousValues: AdminPreviousValues
}

# AuthenticateAdminPayload#
type AuthenticateAdminPayload {
  id: ID!
  token: String!
}

input CreateAdmin {
  email: String!
  password: String!
}

input CreateUser {
  avatarUrl: String
  name: String
}

# LoggedInAdminPayload#
type LoggedInAdminPayload {
  id: ID!
}

type Mutation {
  createAdmin(email: String!, password: String!): Admin
  updateAdmin(email: String, id: ID!, password: String): Admin
  updateUser(avatarUrl: String, id: ID!, name: String): User
  updateOrCreateAdmin(update: UpdateAdmin!, create: CreateAdmin!): Admin
  updateOrCreateUser(update: UpdateUser!, create: CreateUser!): User
  deleteAdmin(id: ID!): Admin
  deleteUser(id: ID!): User
  createUser(avatarUrl: String, name: String): User

  # authenticate#
  authenticateAdmin(email: String!, password: String!): AuthenticateAdminPayload

  # signup#
  signupAdmin(email: String!, password: String!): SignupAdminPayload
}

# An object with an ID#
interface Node {
  # The id of the object.#
  id: ID!
}

type Query {
  allAdmins(
    filter: AdminFilter
    orderBy: AdminOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Admin!]!
  allUsers(
    filter: UserFilter
    orderBy: UserOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User!]!
  _allAdminsMeta(
    filter: AdminFilter
    orderBy: AdminOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
  _allUsersMeta(
    filter: UserFilter
    orderBy: UserOrderBy
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): _QueryMeta!
  Admin(email: String, id: ID): Admin
  User(id: ID): User

  # loggedInAdmin#
  loggedInAdmin: LoggedInAdminPayload
  user: User

  # Fetches an object given its ID#
  node(
    # The ID of an object#
    id: ID!
  ): Node
}

# SignupAdminPayload#
type SignupAdminPayload {
  id: ID!
  token: String!
}

type Subscription {
  Admin(filter: AdminSubscriptionFilter): AdminSubscriptionPayload
  User(filter: UserSubscriptionFilter): UserSubscriptionPayload
}

input UpdateAdmin {
  email: String
  id: ID!
  password: String
}

input UpdateUser {
  avatarUrl: String
  id: ID!
  name: String
}

type User implements Node {
  avatarUrl: String
  id: ID!
  name: String
}

input UserFilter {
  # Logical AND on all given filters.#
  AND: [UserFilter!]

  # Logical OR on all given filters.#
  OR: [UserFilter!]
  avatarUrl: String

  # All values that are not equal to given value.#
  avatarUrl_not: String

  # All values that are contained in given list.#
  avatarUrl_in: [String!]

  # All values that are not contained in given list.#
  avatarUrl_not_in: [String!]

  # All values less than the given value.#
  avatarUrl_lt: String

  # All values less than or equal the given value.#
  avatarUrl_lte: String

  # All values greater than the given value.#
  avatarUrl_gt: String

  # All values greater than or equal the given value.#
  avatarUrl_gte: String

  # All values containing the given string.#
  avatarUrl_contains: String

  # All values not containing the given string.#
  avatarUrl_not_contains: String

  # All values starting with the given string.#
  avatarUrl_starts_with: String

  # All values not starting with the given string.#
  avatarUrl_not_starts_with: String

  # All values ending with the given string.#
  avatarUrl_ends_with: String

  # All values not ending with the given string.#
  avatarUrl_not_ends_with: String
  id: ID

  # All values that are not equal to given value.#
  id_not: ID

  # All values that are contained in given list.#
  id_in: [ID!]

  # All values that are not contained in given list.#
  id_not_in: [ID!]

  # All values less than the given value.#
  id_lt: ID

  # All values less than or equal the given value.#
  id_lte: ID

  # All values greater than the given value.#
  id_gt: ID

  # All values greater than or equal the given value.#
  id_gte: ID

  # All values containing the given string.#
  id_contains: ID

  # All values not containing the given string.#
  id_not_contains: ID

  # All values starting with the given string.#
  id_starts_with: ID

  # All values not starting with the given string.#
  id_not_starts_with: ID

  # All values ending with the given string.#
  id_ends_with: ID

  # All values not ending with the given string.#
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.#
  name_not: String

  # All values that are contained in given list.#
  name_in: [String!]

  # All values that are not contained in given list.#
  name_not_in: [String!]

  # All values less than the given value.#
  name_lt: String

  # All values less than or equal the given value.#
  name_lte: String

  # All values greater than the given value.#
  name_gt: String

  # All values greater than or equal the given value.#
  name_gte: String

  # All values containing the given string.#
  name_contains: String

  # All values not containing the given string.#
  name_not_contains: String

  # All values starting with the given string.#
  name_starts_with: String

  # All values not starting with the given string.#
  name_not_starts_with: String

  # All values ending with the given string.#
  name_ends_with: String

  # All values not ending with the given string.#
  name_not_ends_with: String
}

enum UserOrderBy {
  avatarUrl_ASC
  avatarUrl_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type UserPreviousValues {
  avatarUrl: String
  id: ID!
  name: String
}

input UserSubscriptionFilter {
  # Logical AND on all given filters.#
  AND: [UserSubscriptionFilter!]

  # Logical OR on all given filters.#
  OR: [UserSubscriptionFilter!]

  mutation_in: [_ModelMutationType!]

  updatedFields_contains: String

  updatedFields_contains_every: [String!]

  updatedFields_contains_some: [String!]
  node: UserSubscriptionFilterNode
}

input UserSubscriptionFilterNode {
  avatarUrl: String

  # All values that are not equal to given value.#
  avatarUrl_not: String

  # All values that are contained in given list.#
  avatarUrl_in: [String!]

  # All values that are not contained in given list.#
  avatarUrl_not_in: [String!]

  # All values less than the given value.#
  avatarUrl_lt: String

  # All values less than or equal the given value.#
  avatarUrl_lte: String

  # All values greater than the given value.#
  avatarUrl_gt: String

  # All values greater than or equal the given value.#
  avatarUrl_gte: String

  # All values containing the given string.#
  avatarUrl_contains: String

  # All values not containing the given string.#
  avatarUrl_not_contains: String

  # All values starting with the given string.#
  avatarUrl_starts_with: String

  # All values not starting with the given string.#
  avatarUrl_not_starts_with: String

  # All values ending with the given string.#
  avatarUrl_ends_with: String

  # All values not ending with the given string.#
  avatarUrl_not_ends_with: String
  id: ID

  # All values that are not equal to given value.#
  id_not: ID

  # All values that are contained in given list.#
  id_in: [ID!]

  # All values that are not contained in given list.#
  id_not_in: [ID!]

  # All values less than the given value.#
  id_lt: ID

  # All values less than or equal the given value.#
  id_lte: ID

  # All values greater than the given value.#
  id_gt: ID

  # All values greater than or equal the given value.#
  id_gte: ID

  # All values containing the given string.#
  id_contains: ID

  # All values not containing the given string.#
  id_not_contains: ID

  # All values starting with the given string.#
  id_starts_with: ID

  # All values not starting with the given string.#
  id_not_starts_with: ID

  # All values ending with the given string.#
  id_ends_with: ID

  # All values not ending with the given string.#
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.#
  name_not: String

  # All values that are contained in given list.#
  name_in: [String!]

  # All values that are not contained in given list.#
  name_not_in: [String!]

  # All values less than the given value.#
  name_lt: String

  # All values less than or equal the given value.#
  name_lte: String

  # All values greater than the given value.#
  name_gt: String

  # All values greater than or equal the given value.#
  name_gte: String

  # All values containing the given string.#
  name_contains: String

  # All values not containing the given string.#
  name_not_contains: String

  # All values starting with the given string.#
  name_starts_with: String

  # All values not starting with the given string.#
  name_not_starts_with: String

  # All values ending with the given string.#
  name_ends_with: String

  # All values not ending with the given string.#
  name_not_ends_with: String
}

type UserSubscriptionPayload {
  mutation: _ModelMutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}
